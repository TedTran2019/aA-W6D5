React: Facebook proj. to develop a version of PHP that could defend against
XSS(cross-site scripting) attacks. This ver. of PHP called XHP integrated
XML-like language to properly escape malicious code.
- condense entire PHP elements into single HTML-like tags
- performance for DOM manipulation was terrible
- decided to use creative elements of PHP into a JS library
	a. XML-like syntax and use of tags
- React: efficiency at updating DOM, lifecycle methods, differential algo to
	identify what needed to be updated
React : open source since 2013, one of the most popular like Angular.

SPA - single page app, only one backend route that renders HTML. To interact
w/ DB, utilizes async ajax requests

Virtual DOM - simpler and faster abstraction of HTML DOM, can traverse and
perform costly operations on virtual DOM prevents costly interactions w/
the real one, only updating when it absolutely needs to

Diffing Algorithm - when rendering, React creates a tree of React eles. When
state or props update, renders tree of potentially diff. elements. This algo
shows how to eficiently update the DOM, removing old nodes and replacing.
HTML elements are given unique IDs so algo can tell them apart. Solves problems
of generating fewest # of operations to re-render, O(N) time.

JSX - syntactic sugar for React.createElement(component, props, ...children)
Babel to transpile JSX into JS -> remember that JSX isn't mandatory, just makes
life easier!

Enzyme and Jest - Enzyme: testing library by Airbnb to compare React outputs,
utilizes shallow rendering to test single components. Used with Jest: framework
by FB for running tests on React code, similar to Jasmine (JS testing framework)
and RSPEC.

jQuery -> most popular, easier to manipulate DOM/handle events/AJAX requests.
w/ React, just worry about updating state

Vue -> new open source, big improvements in speed relative to React. Much
smaller comunity and lacks many libraries like React.

Angular -> maintained by Google, part of MEAN stack, framework not a library
like React. MVVM (MOdel-View-ViewModel)

Ember - Framework, development is slow.

React Native -> React components to develop mobile apps in JS.
----------------------------------------------------------------------------
NPM -> node package manager
- configuration process for automating node module installation for apps that
	have multiple JS dependencies
	a. npm init -y
	b. npm install <package_name> , e.g npm install react redux
		- installs react and redux
	c. inside package.json, write down dependencies
	d. npm install

- Recall diff between bundle exec some_command vs some_command, Gemfile ver. vs
	local ver
- add scripts for packages used, then can use npm run <package_name> to ensure
	the package.json ver is run

Webpack Config
- .gitignore -> https://github.com/github/gitignore
	a. usually node_modules, bundle.js, bundle.js.map are ignored
- webpack.config.js and export a single object, inside root dir
	a. for Rails projects, bundle.js in app/assets/javascripts
- webpack.config.js accepts a devtool key to enable useful tools, particularly
	source-map -> see line # in orig code when errors are raised
- also accepts resolve key, specify what file extensions to process, remember to
	include * to allow explicit extensions
- https://open.appacademy.io/learn/full-stack-online/react/webpack -> Look at
	how the sample was done!

ES6 Syntax: Object Destructuring
- extract parts of object and assign to diff vars
- works for nested properties as well
- works on funcs/vars that returns obj
- much easier to extract values, esp if keeping same name
- can easily be used as parameters, takes exactly what it needs

ES6: Import / Export
- export rather than module.exports
- can refer to by name and export all at once inside {}, or do as writing
	by prepending export
- to export a single obj, use export default
- import instead of require
	- import Etc from 'path'
- or can do import {etc, etc} from 'path', braces only necessary w/ multiple imports
- It's basically obj destructuring!
- can give default unnamed exports any name when importing
- named exports, import names must exactly match
- to grab all exports, use import * as etc from 'path'
- alias with as is necessary to refer to it later!

React Developer Tools:
- debugging React is hard
- dev tools are easy to install/no setup
- React Developer tools!
	a. inspect component, looking at props/state
	b. change component's state from console
	c. compare component to HTML it generates in Elements tab
https://github.com/facebook/react

https://reactjs.org/docs/thinking-in-react.html
Start w/ mock!
1. Break UI into component hierarchy
	a. draw boxes around every component/sub-component and give names
	b. same tech for new function/obj-- single responsibility principle
	c. arrange in hierarchy!
2. Build static version in React
	a. components that reuse other components/pass data using props
		- props are a way of passing data from parent to child
		- don't use state at all to build static version, reserved for interactivity
		- top down or bottom up, big components first or small first
			a. top-down easier for smaller projects
			b. bottom-up easier for larger and write tests as you build
		- bunch of reusable components with render() methods
		- component at top of hierarchy will take data model as prop
			a. React utilizes one-way data flow/one-way binding
	b. two types of model data in React: props and state
		- props is short for properties (gets passed to component)
		- state is managed within component
		- responsibility of component is to translate raw data into rich HTML
		- both:
			a. plain JS objs
			b. trigger render update
			c. deterministic
		- state: if needs to alter an attribute some point in time, state!
			- Mutation from user events!
			- serializable representation of one point in time, a snapshot
			- is private
		- prop: Otherwise, prop! Config, options, immutable!
		- component types: stateless and stateful
		- stateless: only props
		- stateful: both props and state, state managers, charge of client-server communication,
			processing data, and responding to user events. Encapsulated, then put all
			visualization/formatting logic downstream into stateless components
3. Identify minimal but complete representation of UI state
	- trigger changes to data model w/ state
	- minimal set of mutable state that app needs
	a. Is it passed in from a parent via props? If so, it probably isn’t state.
	b. Does it remain unchanged over time? If so, it probably isn’t state.
	c. Can you compute it based on any other state or props in your component? If so, it isn’t state.
4. Identify where state should live
	- which component mutates or owns the state
	- all about one way data flow down the components hierarchy
a. Identify every component that renders something based on that state.
b. Find a common owner component (a single component above all the components that need the state in the hierarchy).
c. Either the common owner or another component higher up in the hierarchy should own the state.
d. If you can’t find a component where it makes sense to own the state, create a
	new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.
	- decide initial state in constructor
	- pass in components as a prop
5. Add inverse data flow
	-	support data flowing from other way, components deep in hierarchy updates
		ones higher up
	- usage of callbacks that will fire whenever state should be update, onChange
		event on inputs
https://reactjs.org/docs/hooks-intro.html
- Hooks, new feature of React 16.8!
----------------------------------------------------------------------
- NOT MVC, just V.
- updating DOM typically bottleneck, deciding which part to update is pain,
	never decide what/how to re-render
- component -> JS functiosnt hat return HTML -> single responsibility principle

Component: props, state, and JSX
	- inherit from React.Component, needs React module
	- props: attribs from parent components w/ no mutation
	- state: mutable ata that affecs rendered output, changes, owned by component,
		initial value in constructor

Ex.
- import React from 'react';
- class Etc extends React.Component
- constructor() {
		super();
	}
- export default Etc

	- render function: describes at any moment in time what compnoent should look like
	- function in mathematical sense of props/state
	- never explicitly called
	- changes to prop/state induce a render
	- utilizes JSX -> {} for interpolation instead of .erb <% %>
	- #setState method? -> invoke this!
	- return a single React element, each single can have any # of descendants
	- handler set by passing prop: e.g onClick
	- value is pointer to handler function
	- event obj contains usual things, usually want to utilize #preventDefault
	- wait DOM has loaded so have target to render into, ReactDOM.render -> replace entire
		content of trget HTML element
	- need to import react and react-dom
	- Look at how to render using ReactDom.render w/ args

Transpilation: Browsers can't understand JSX, mus b transpiled into raw JS
- Utilizes Babel: babel-core, babel-preset-react, babel-preset-es2015, babel-loader
- preset Babel in webpack config, runs files ending w/ .jsx thru Babel loader
	- remember npm install --save (to update package.json)
- always git ignore node modules and the bundle.js
- devtool 'source-map' -> can look code as we write it in dev tools

React: Functional Components
- https://reactjs.org/docs/hooks-intro.html soon?
- Can make a class or a function, as long as it takes in props and returns
	HTML
- if class with only render function, make a single function instead
- if creating lots of lis, give each a key

React: Lifecycle Methods
- componentWillMount, ...DidMount, ..WillReceiveProps, ...WillUpdate, ...DidUpdate,
	...WillUnmount -> occur and invoked by React, not invoked ourselves. Can place
	debugger within can see all lifecycle methods in React docs
- bind this in constructor if use more than once

React Components: this.props and this.state
1. props: passed in time of initialization, accessible in instance methods
	- never change props
2. state: properties that can be altered by component itself
	- use to keep track of mutable internal data
	- if never goign to change or used across entire app, use props instead
	- can reset own state at certain points in lifecycle using this.setState()
	- always use setState because doing this.state = doesn't update component
	- never call setState during a render or infinite loop
	- setState is async, cannot rely on value for calc next state
	- setState takes a callback as optional second arg, doesn't run until state is
		updated

- in React, utilize className instead of class for HTMl
- constructor is implicitly inherited, only need render method
- remember rules for implicit returns in ES6!
----------------------------------------------------------------------------
Babel:
- JS dev touches a lot of browsers w/ diff levels of compatibility
- Babel converts all JS into vanilla ES5 compatible w/ browsers and node
- Utilize webpack to transpile JSX + ES6 code into browser-compat JS when
	creting a bundle
- npm install @babel/core @babel/preset-env @babel/preset-react babel-loader
- core is the transpiler itself, preset-env and preset-react are configs to
	interpret ES6 and JSX
- configure module key of webpack.config.js
	- https://open.appacademy.io/learn/full-stack-online/react/babel
- http://kangax.github.io/compat-table/es6/
	- Don't need to worry about if Babel is used

React:
- JS library for creating UI components
- manage all UI updates when any piece of app changes
- reconcilation using virtual DOM is extremely quick!

JSX:
- like Ruby's erb, but with JS instead
- interpolate using {}
- http://facebook.github.io/jsx/

React Components:
- JS func return HTMl to be rendered, typically written in JSX
- require react and react-dom
Declaration:
- inherit from React.Component
- no states and no hook: utilize purely functional component
	- common in Redux applications
Lifecycle Methods:
- if need to run code during various stages of lifecycle
- https://reactjs.org/docs/react-component.html
Synthetic Events: Event Handlers
- React equiv. to vanilla JS #addEventListener
- pass event listeners directly to components via props
- https://reactjs.org/docs/events.html

https://reactjs.org/docs/getting-started.html
- modular, can gradually add
- skip officially docs until better understanding, then learn about context,
	refs, hooks, etc...
-------------------------------------------------------------------------------
Redux Lite - keep track of global state for an application
- javascript obj for 'truth'
- strict API for how it can be modified
- subscription feature, other parts of app can specify a callback to be invoked
	whenever changes are made to obj

Dec 30th start on this again-- after more than 1 month of break and doing AoC casually
while on said break. Went to SF for a week, spent lots of time with gf in Socal
living together!
Nov 22nd to Dec 30th... Jesus, I'm going to be rusty once I'm back.

Okay, getting started with NPM once more. A basic documentation reading journey.
npx webpack --display-error-details
Homework W6D5: Setting up a basic React project
Recall how to run scripts in webpack! npm run script_name
npm mainly to install packages, npx to execute packages

webpack
webpack-cli
@babel/core
@babel/preset-env
@babel/preset-react
babel-loader
react
react-dom

New Years!

Holy shit, I haven't looked at CSS/HTML in so long. CSS friends 12 is goign to be
very interesting.
Basic review of position and border radius properties
